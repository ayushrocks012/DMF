'====================================================================================
'== CODE FOR THE USERFORM: frmMultiSubtotal
'== This code does not need to be changed.
'====================================================================================

Option Explicit

' --- Form Control Event Handlers ---

Private Sub btnAddHierarchy_Click()
    Call MoveSelectedItems(lstAvailableCols, lstHierarchyOrder, True)
End Sub

Private Sub btnRemoveHierarchy_Click()
    Dim i As Long
    For i = lstHierarchyOrder.ListCount - 1 To 0 Step -1
        If lstHierarchyOrder.Selected(i) Then
            lstAvailableCols.AddItem lstHierarchyOrder.List(i)
            lstHierarchyOrder.RemoveItem i
        End If
    Next i
End Sub

Private Sub btnAddSubtotal_Click()
    Call MoveSelectedItems(lstAvailableCols, lstSubtotalCols, True)
End Sub

Private Sub btnRemoveSubtotal_Click()
    Dim i As Long
    For i = lstSubtotalCols.ListCount - 1 To 0 Step -1
        If lstSubtotalCols.Selected(i) Then
            lstAvailableCols.AddItem lstSubtotalCols.List(i)
            lstSubtotalCols.RemoveItem i
        End If
    Next i
End Sub

Private Sub btnAddAllSubtotals_Click()
    If lstAvailableCols.ListCount = 0 Then Exit Sub
    Dim i As Long, j As Long, itemExists As Boolean
    For i = 0 To lstAvailableCols.ListCount - 1
        itemExists = False
        For j = 0 To lstSubtotalCols.ListCount - 1
            If lstSubtotalCols.List(j) = lstAvailableCols.List(i) Then
                itemExists = True
                Exit For
            End If
        Next j
        If Not itemExists Then lstSubtotalCols.AddItem lstAvailableCols.List(i)
    Next i
    lstAvailableCols.Clear
End Sub

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnDown_Click()
    Call MoveListItemUpDown(lstHierarchyOrder, 1)
End Sub

Private Sub btnUp_Click()
    Call MoveListItemUpDown(lstHierarchyOrder, -1)
End Sub

Private Sub btnOK_Click()
    If Me.cboWorksheets.ListIndex = -1 Then MsgBox "Please select a worksheet.", vbExclamation: Exit Sub
    If lstHierarchyOrder.ListCount = 0 Then MsgBox "Please select at least one hierarchy column.", vbExclamation: Exit Sub
    If lstSubtotalCols.ListCount = 0 Then MsgBox "Please select at least one subtotal column.", vbExclamation: Exit Sub
    
    ' --- Pass settings to global variables ---
    targetWorksheetName = Me.cboWorksheets.Value
    Set hierarchyColNames = New Collection
    Dim i As Long
    For i = 0 To lstHierarchyOrder.ListCount - 1: hierarchyColNames.Add lstHierarchyOrder.List(i): Next
    Set subtotalColNames = New Collection
    For i = 0 To lstSubtotalCols.ListCount - 1: subtotalColNames.Add lstSubtotalCols.List(i): Next
    summaryBelow = Me.optSummaryBelow.Value
    skipSort = Me.chkSkipSort.Value
    
    Me.Hide
    ' --- CALL THE NEW IN-PLACE ENGINE ---
    Call RunInPlaceSubtotal
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Me.optSummaryBelow.Value = True
    Me.chkSkipSort.Value = False
    Me.lstAvailableCols.RowSource = ""
    Me.lstHierarchyOrder.RowSource = ""
    Me.lstSubtotalCols.RowSource = ""
    Dim ws As Worksheet
    Me.cboWorksheets.Clear
    For Each ws In ThisWorkbook.Worksheets
        If ws.Visible = xlSheetVisible Then Me.cboWorksheets.AddItem ws.Name
    Next ws
    On Error Resume Next
    Me.cboWorksheets.Value = ActiveSheet.Name
    If Err.Number <> 0 And Me.cboWorksheets.ListCount > 0 Then Me.cboWorksheets.ListIndex = 0
    On Error GoTo 0
End Sub

Private Sub cboWorksheets_Change()
    Call PopulateAvailableColumns
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then Call CancelAndCleanup
End Sub

' --- Helper Subroutines ---

Private Sub PopulateAvailableColumns()
    Me.lstAvailableCols.Clear
    Me.lstHierarchyOrder.Clear
    Me.lstSubtotalCols.Clear
    If Me.cboWorksheets.ListIndex = -1 Then Exit Sub
    Dim ws As Worksheet, lastCol As Long, i As Long, headerText As String
    Set ws = ThisWorkbook.Worksheets(Me.cboWorksheets.Value)
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    If lastCol = 0 Then Exit Sub
    For i = 1 To lastCol
        headerText = Trim(ws.Cells(headerRow, i).Text)
        If headerText <> "" Then Me.lstAvailableCols.AddItem headerText
    Next i
End Sub

Private Sub MoveSelectedItems(sourceList As MSForms.ListBox, destList As MSForms.ListBox, preventDuplicates As Boolean)
    Dim i As Long, j As Long, itemExists As Boolean
    For i = sourceList.ListCount - 1 To 0 Step -1
        If sourceList.Selected(i) Then
            itemExists = False
            If preventDuplicates Then
                For j = 0 To destList.ListCount - 1
                    If destList.List(j) = sourceList.List(i) Then itemExists = True: Exit For
                Next j
            End If
            If Not itemExists Then
                destList.AddItem sourceList.List(i)
                sourceList.RemoveItem i
            Else
                MsgBox "'" & sourceList.List(i) & "' is already in the destination list.", vbInformation
            End If
        End If
    Next i
End Sub

Private Sub MoveListItemUpDown(lb As MSForms.ListBox, direction As Integer)
    Dim selectedIdx As Long: selectedIdx = lb.ListIndex
    If selectedIdx = -1 Then Exit Sub
    If direction = -1 And selectedIdx = 0 Then Exit Sub
    If direction = 1 And selectedIdx = lb.ListCount - 1 Then Exit Sub
    Dim temp As String: temp = lb.List(selectedIdx)
    lb.List(selectedIdx) = lb.List(selectedIdx + direction)
    lb.List(selectedIdx + direction) = temp
    lb.Selected(selectedIdx + direction) = True
End Sub

'====================================================================================
'== CODE FOR A NEW MODULE
'== This is the new "In-Place" engine.
'====================================================================================

Option Explicit

' --- Global variables to hold settings from the form ---
Public targetWorksheetName As String
Public hierarchyColNames As Collection
Public subtotalColNames As Collection
Public summaryBelow As Boolean
Public headerRow As Long
Public skipSort As Boolean

' --- Main entry points ---
Sub ShowSubtotalForm()
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
    Dim headerRowInput As String
    Do
        headerRowInput = InputBox("Please enter the header row number:", "Specify Header Row", "2")
        If headerRowInput = "" Then Exit Sub
        If IsNumeric(headerRowInput) And CLng(headerRowInput) > 0 Then
            headerRow = CLng(headerRowInput)
            Exit Do
        Else
            MsgBox "Invalid input. Please enter a positive number for the row.", vbExclamation
        End If
    Loop
    frmMultiSubtotal.Show
End Sub

Sub CancelAndCleanup()
    Call RestoreExcelSettings(True)
End Sub

' --- IN-PLACE ENGINE CONTROLLER ---
Sub RunInPlaceSubtotal()
    On Error GoTo ErrorHandler
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Preparing to process..."
    
    Dim ws As Worksheet
    Dim hierarchyIndices() As Long, subtotalIndices() As Long
    Dim dataRange As Range
    
    Set ws = ThisWorkbook.Worksheets(targetWorksheetName)
    
    ' --- 1. PREPARE SHEET AND GET INDICES ---
    If Not PrepareSheetAndGetIndices(ws, hierarchyIndices, subtotalIndices, dataRange) Then GoTo Cleanup
    
    ' --- 2. SORT DATA (IF REQUESTED) ---
    If Not skipSort Then
        Application.StatusBar = "Sorting data..."
        SortDataInPlace ws, dataRange, hierarchyIndices
    End If
    
    ' --- 3. APPLY NATIVE SUBTOTALS ---
    Application.StatusBar = "Inserting subtotal rows..."
    ApplyNativeSubtotals dataRange, hierarchyIndices, subtotalIndices
    
    ' --- 4. POST-PROCESS TO FIX LABELS ---
    Application.StatusBar = "Formatting report and adjusting labels..."
    PostProcessSubtotals ws, dataRange, hierarchyIndices
    
    ws.Columns.AutoFit
    Application.StatusBar = "Process complete!"

Cleanup:
    Call RestoreExcelSettings(False)
    Exit Sub

ErrorHandler:
    MsgBox "An unexpected error occurred: " & vbCrLf & Err.Description, vbCritical, "Subtotal Tool Error"
    Resume Cleanup
End Sub

' --- In-Place Engine Sub-Procedures ---

Private Function PrepareSheetAndGetIndices(ws As Worksheet, ByRef hierarchyIndices() As Long, ByRef subtotalIndices() As Long, ByRef dataRange As Range) As Boolean
    Application.StatusBar = "Validating selections..."
    
    ' Clear any previous subtotals and outlines first
    ws.Cells.RemoveSubtotal
    
    Dim i As Long, colIdx As Long, lastCol As Long, lastRow As Long
    ReDim hierarchyIndices(1 To hierarchyColNames.Count)
    ReDim subtotalIndices(1 To subtotalColNames.Count)
    
    For i = 1 To hierarchyColNames.Count
        colIdx = GetColumnIndexByText(hierarchyColNames(i), ws, headerRow)
        If colIdx = 0 Then MsgBox "Could not find HIERARCHY column '" & hierarchyColNames(i) & "'", vbCritical: Exit Function
        hierarchyIndices(i) = colIdx
    Next i
    
    For i = 1 To subtotalColNames.Count
        colIdx = GetColumnIndexByText(subtotalColNames(i), ws, headerRow)
        If colIdx = 0 Then MsgBox "Could not find SUBTOTAL column '" & subtotalColNames(i) & "'", vbCritical: Exit Function
        subtotalIndices(i) = colIdx
    Next i
    
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    lastRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    If lastRow <= headerRow Then MsgBox "No data found below header row.", vbInformation: Exit Function
    
    Set dataRange = ws.Range(ws.Cells(headerRow, 1), ws.Cells(lastRow, lastCol))
    
    PrepareSheetAndGetIndices = True
End Function

Private Sub SortDataInPlace(ws As Worksheet, dataRange As Range, hierarchyIndices() As Long)
    Dim i As Long
    With ws.Sort
        .SortFields.Clear
        For i = 1 To UBound(hierarchyIndices)
            .SortFields.Add Key:=ws.Columns(hierarchyIndices(i)), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        Next i
        .SetRange dataRange
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub

Private Sub ApplyNativeSubtotals(dataRange As Range, hierarchyIndices() As Long, subtotalIndices() As Long)
    ' Applies the standard Excel subtotal command.
    ' This is the correct order: from most general to most detailed.
    dataRange.Subtotal GroupBy:=1, Totals:=Array(1), Function:=xlSum, Replace:=True ' Dummy to clear
    dataRange.RemoveSubtotal
    
    dataRange.Subtotal GroupBy:=hierarchyIndices, Function:=xlSum, TotalList:=subtotalIndices, _
        Replace:=True, PageBreaks:=False, SummaryBelowData:=summaryBelow
End Sub

Private Sub PostProcessSubtotals(ws As Worksheet, dataRange As Range, hierarchyIndices() As Long)
    ' --- NEW ROBUST LOGIC ---
    ' Loops through the generated report to populate parent hierarchy values on total rows.
    Dim lastRow As Long, r As Long, level As Long
    Dim totalLevel As Long
    
    lastRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    
    ' Loop from the bottom up
    For r = lastRow To dataRange.Row + 1 Step -1
        totalLevel = 0
        ' Check if this row is a total row by finding which hierarchy column has a " Total" label
        For level = 1 To UBound(hierarchyIndices)
            If InStr(1, CStr(ws.Cells(r, hierarchyIndices(level)).Value), " Total", vbTextCompare) > 0 Then
                totalLevel = level
                Exit For
            End If
        Next level
        
        ' If it's a total row (and not the Grand Total which is handled differently)
        If totalLevel > 0 And Not InStr(1, CStr(ws.Cells(r, hierarchyIndices(1)).Value), "Grand Total", vbTextCompare) > 0 Then
            ' Populate parent hierarchy values for context
            Dim parentLevel As Long
            For parentLevel = 1 To totalLevel - 1
                ' Copy the value from the data row immediately above the total row.
                ' This is safe because the row above a subtotal is always part of that group.
                ws.Cells(r, hierarchyIndices(parentLevel)).Value = ws.Cells(r - 1, hierarchyIndices(parentLevel)).Value
            Next parentLevel
        End If
    Next r
End Sub

Private Sub RestoreExcelSettings(ByVal cancelled As Boolean)
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    If cancelled Then Application.StatusBar = "Operation cancelled." Else Application.StatusBar = False
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
End Sub

Private Function GetColumnIndexByText(colName As String, ws As Worksheet, ByVal headerRowNum As Long) As Long
    Dim lastCol As Long: lastCol = ws.Cells(headerRowNum, ws.Columns.Count).End(xlToLeft).Column
    Dim i As Long
    For i = 1 To lastCol
        If Trim(ws.Cells(headerRowNum, i).Text) = colName Then GetColumnIndexByText = i: Exit Function
    Next i
End Function
