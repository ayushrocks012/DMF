'====================================================================================
'== CODE FOR THE USERFORM: frmMultiSubtotal
'== This code does not need to be changed.
'====================================================================================

Option Explicit

' --- Form Control Event Handlers ---

Private Sub btnAddHierarchy_Click()
    Call MoveSelectedItems(lstAvailableCols, lstHierarchyOrder, True)
End Sub

Private Sub btnRemoveHierarchy_Click()
    Dim i As Long
    For i = lstHierarchyOrder.ListCount - 1 To 0 Step -1
        If lstHierarchyOrder.Selected(i) Then
            lstAvailableCols.AddItem lstHierarchyOrder.List(i)
            lstHierarchyOrder.RemoveItem i
        End If
    Next i
End Sub

Private Sub btnAddSubtotal_Click()
    Call MoveSelectedItems(lstAvailableCols, lstSubtotalCols, True)
End Sub

Private Sub btnRemoveSubtotal_Click()
    Dim i As Long
    For i = lstSubtotalCols.ListCount - 1 To 0 Step -1
        If lstSubtotalCols.Selected(i) Then
            lstAvailableCols.AddItem lstSubtotalCols.List(i)
            lstSubtotalCols.RemoveItem i
        End If
    Next i
End Sub

Private Sub btnAddAllSubtotals_Click()
    If lstAvailableCols.ListCount = 0 Then Exit Sub
    Dim i As Long, j As Long, itemExists As Boolean
    For i = 0 To lstAvailableCols.ListCount - 1
        itemExists = False
        For j = 0 To lstSubtotalCols.ListCount - 1
            If lstSubtotalCols.List(j) = lstAvailableCols.List(i) Then
                itemExists = True
                Exit For
            End If
        Next j
        If Not itemExists Then lstSubtotalCols.AddItem lstAvailableCols.List(i)
    Next i
    lstAvailableCols.Clear
End Sub

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnDown_Click()
    Call MoveListItemUpDown(lstHierarchyOrder, 1)
End Sub

Private Sub btnUp_Click()
    Call MoveListItemUpDown(lstHierarchyOrder, -1)
End Sub

Private Sub btnOK_Click()
    If Me.cboWorksheets.ListIndex = -1 Then MsgBox "Please select a worksheet.", vbExclamation: Exit Sub
    If lstHierarchyOrder.ListCount = 0 Then MsgBox "Please select at least one hierarchy column.", vbExclamation: Exit Sub
    If lstSubtotalCols.ListCount = 0 Then MsgBox "Please select at least one subtotal column.", vbExclamation: Exit Sub
    
    targetWorksheetName = Me.cboWorksheets.Value
    Set hierarchyColNames = New Collection
    Dim i As Long
    For i = 0 To lstHierarchyOrder.ListCount - 1: hierarchyColNames.Add lstHierarchyOrder.List(i): Next
    Set subtotalColNames = New Collection
    For i = 0 To lstSubtotalCols.ListCount - 1: subtotalColNames.Add lstSubtotalCols.List(i): Next
    summaryBelow = Me.optSummaryBelow.Value
    
    Me.Hide
    Call RunHighSpeedSubtotal
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Me.optSummaryBelow.Value = True
    Me.lstAvailableCols.RowSource = ""
    Me.lstHierarchyOrder.RowSource = ""
    Me.lstSubtotalCols.RowSource = ""
    Dim ws As Worksheet
    Me.cboWorksheets.Clear
    For Each ws In ThisWorkbook.Worksheets
        If ws.Visible = xlSheetVisible Then Me.cboWorksheets.AddItem ws.Name
    Next ws
    On Error Resume Next
    Me.cboWorksheets.Value = ActiveSheet.Name
    If Err.Number <> 0 And Me.cboWorksheets.ListCount > 0 Then Me.cboWorksheets.ListIndex = 0
    On Error GoTo 0
End Sub

Private Sub cboWorksheets_Change()
    Call PopulateAvailableColumns
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then Call CancelAndCleanup
End Sub

' --- Helper Subroutines ---

Private Sub PopulateAvailableColumns()
    Me.lstAvailableCols.Clear
    Me.lstHierarchyOrder.Clear
    Me.lstSubtotalCols.Clear
    If Me.cboWorksheets.ListIndex = -1 Then Exit Sub
    Dim ws As Worksheet, lastCol As Long, i As Long, headerText As String
    Set ws = ThisWorkbook.Worksheets(Me.cboWorksheets.Value)
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    If lastCol = 0 Then Exit Sub
    For i = 1 To lastCol
        headerText = Trim(ws.Cells(headerRow, i).Text)
        If headerText <> "" Then Me.lstAvailableCols.AddItem headerText
    Next i
End Sub

Private Sub MoveSelectedItems(sourceList As MSForms.ListBox, destList As MSForms.ListBox, preventDuplicates As Boolean)
    Dim i As Long, j As Long, itemExists As Boolean
    For i = sourceList.ListCount - 1 To 0 Step -1
        If sourceList.Selected(i) Then
            itemExists = False
            If preventDuplicates Then
                For j = 0 To destList.ListCount - 1
                    If destList.List(j) = sourceList.List(i) Then itemExists = True: Exit For
                Next j
            End If
            If Not itemExists Then
                destList.AddItem sourceList.List(i)
                sourceList.RemoveItem i
            Else
                MsgBox "'" & sourceList.List(i) & "' is already in the destination list.", vbInformation
            End If
        End If
    Next i
End Sub

Private Sub MoveListItemUpDown(lb As MSForms.ListBox, direction As Integer)
    Dim selectedIdx As Long: selectedIdx = lb.ListIndex
    If selectedIdx = -1 Then Exit Sub
    If direction = -1 And selectedIdx = 0 Then Exit Sub
    If direction = 1 And selectedIdx = lb.ListCount - 1 Then Exit Sub
    Dim temp As String: temp = lb.List(selectedIdx)
    lb.List(selectedIdx) = lb.List(selectedIdx + direction)
    lb.List(selectedIdx + direction) = temp
    lb.Selected(selectedIdx + direction) = True
End Sub

'====================================================================================
'== CODE FOR A NEW MODULE
'== This is the high-speed, robust, in-memory engine.
'== IMPORTANT: Go to Tools -> References... and check "Microsoft Scripting Runtime"
'====================================================================================

Option Explicit

' --- Global variables to hold settings from the form ---
Public targetWorksheetName As String
Public hierarchyColNames As Collection
Public subtotalColNames As Collection
Public summaryBelow As Boolean
Public headerRow As Long

' --- Main entry points ---
Sub ShowSubtotalForm()
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
    Dim headerRowInput As String
    Do
        headerRowInput = InputBox("Please enter the header row number:", "Specify Header Row", "2")
        If headerRowInput = "" Then Exit Sub
        If IsNumeric(headerRowInput) And CLng(headerRowInput) > 0 Then
            headerRow = CLng(headerRowInput)
            Exit Do
        Else
            MsgBox "Invalid input. Please enter a positive number for the row.", vbExclamation
        End If
    Loop
    frmMultiSubtotal.Show
End Sub

Sub CancelAndCleanup()
    Call RestoreExcelSettings(True)
End Sub

' --- HIGH-SPEED ENGINE CONTROLLER ---
Sub RunHighSpeedSubtotal()
    On Error GoTo ErrorHandler
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Preparing to process..."
    
    Dim wsSource As Worksheet, wsOutput As Worksheet
    Dim hierarchyIndices() As Long, subtotalIndices() As Long
    Dim valueArray As Variant, formulaArray As Variant
    Dim outputArray As Variant, groupRows As Collection
    
    Set wsSource = ThisWorkbook.Worksheets(targetWorksheetName)
    
    If Not PrepareAndReadData(wsSource, hierarchyIndices, subtotalIndices, valueArray, formulaArray) Then GoTo Cleanup
    
    Application.StatusBar = "Sorting " & UBound(valueArray, 1) - 1 & " rows in memory..."
    QuickSort2DArray valueArray, LBound(valueArray, 1) + 1, UBound(valueArray, 1), hierarchyIndices, formulaArray
    
    Application.StatusBar = "Aggregating totals and building report..."
    BuildOutputArray valueArray, formulaArray, hierarchyIndices, subtotalIndices, outputArray, groupRows
    
    Application.StatusBar = "Creating new report worksheet..."
    Set wsOutput = CreateOutputSheet()
    
    If headerRow > 1 Then
        wsSource.Rows("1:" & headerRow - 1).Copy wsOutput.Rows("1:" & headerRow - 1)
    End If
    
    Application.StatusBar = "Writing " & UBound(outputArray, 1) & " rows to new sheet..."
    wsOutput.Range("A" & headerRow).Resize(UBound(outputArray, 1), UBound(outputArray, 2)).Value = outputArray
    
    Application.StatusBar = "Applying formatting and outline..."
    ApplyFormattingAndGrouping wsOutput, groupRows, UBound(hierarchyIndices), headerRow
    
    wsOutput.Columns.AutoFit
    Application.StatusBar = "Process complete!"

Cleanup:
    Call RestoreExcelSettings(False)
    Exit Sub

ErrorHandler:
    MsgBox "An unexpected error occurred: " & vbCrLf & Err.Description, vbCritical, "Subtotal Tool Error"
    Resume Cleanup
End Sub

' --- High-Speed Engine Sub-Procedures ---

Private Function PrepareAndReadData(ws As Worksheet, ByRef hierarchyIndices() As Long, ByRef subtotalIndices() As Long, ByRef valueArray As Variant, ByRef formulaArray As Variant) As Boolean
    Application.StatusBar = "Validating selections and reading data..."
    Dim i As Long, colIdx As Long, lastCol As Long, lastRow As Long
    ReDim hierarchyIndices(1 To hierarchyColNames.Count)
    ReDim subtotalIndices(1 To subtotalColNames.Count)
    
    For i = 1 To hierarchyColNames.Count
        colIdx = GetColumnIndexByText(hierarchyColNames(i), ws, headerRow)
        If colIdx = 0 Then MsgBox "Could not find HIERARCHY column '" & hierarchyColNames(i) & "'", vbCritical: Exit Function
        hierarchyIndices(i) = colIdx
    Next i
    
    For i = 1 To subtotalColNames.Count
        colIdx = GetColumnIndexByText(subtotalColNames(i), ws, headerRow)
        If colIdx = 0 Then MsgBox "Could not find SUBTOTAL column '" & subtotalColNames(i) & "'", vbCritical: Exit Function
        subtotalIndices(i) = colIdx
    Next i
    
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    lastRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    If lastRow <= headerRow Then MsgBox "No data found below header row.", vbInformation: Exit Function
    
    Dim dataRange As Range
    Set dataRange = ws.Range(ws.Cells(headerRow, 1), ws.Cells(lastRow, lastCol))
    
    valueArray = dataRange.Value2
    formulaArray = dataRange.Formula
    PrepareAndReadData = True
End Function

Private Sub BuildOutputArray(valueArray As Variant, formulaArray As Variant, hierarchyIndices() As Long, subtotalIndices() As Long, ByRef outputArray As Variant, ByRef groupRows As Collection)
    Dim outputCollection As New Collection, rowData() As Variant
    Dim numRows As Long, numCols As Long, numLevels As Long, row As Long, i As Long, level As Long
    numRows = UBound(valueArray, 1): numCols = UBound(valueArray, 2): numLevels = UBound(hierarchyIndices)
    Set groupRows = New Collection
    
    ReDim rowData(1 To numCols)
    For i = 1 To numCols: rowData(i) = valueArray(1, i): Next
    outputCollection.Add rowData
    
    Dim grandTotals() As Double: ReDim grandTotals(1 To numCols)
    Dim dictLevels As New Scripting.Dictionary
    For level = 1 To numLevels: Set dictLevels(level) = New Scripting.Dictionary: Next
    
    For row = 2 To numRows
        ReDim rowData(1 To numCols)
        For i = 1 To numCols: rowData(i) = formulaArray(row, i): Next
        outputCollection.Add rowData
        
        Dim key As String, totals() As Double
        For level = 1 To numLevels
            key = ""
            For i = 1 To level: key = key & CStr(valueArray(row, hierarchyIndices(i))) & Chr(0): Next
            If Not dictLevels(level).Exists(key) Then ReDim totals(1 To numCols): dictLevels(level)(key) = totals
            totals = dictLevels(level)(key)
            For i = 1 To UBound(subtotalIndices)
                If Not IsError(valueArray(row, subtotalIndices(i))) Then totals(subtotalIndices(i)) = totals(subtotalIndices(i)) + Val(valueArray(row, subtotalIndices(i)))
            Next i
            dictLevels(level)(key) = totals
        Next level
        
        For i = 1 To UBound(subtotalIndices)
            If Not IsError(valueArray(row, subtotalIndices(i))) Then grandTotals(subtotalIndices(i)) = grandTotals(subtotalIndices(i)) + Val(valueArray(row, subtotalIndices(i)))
        Next i
        
        Dim nextRow As Long
        If row = numRows Then nextRow = row Else nextRow = row + 1
        
        For level = numLevels To 1 Step -1
            Dim currentKey As String: currentKey = "": Dim nextKey As String: nextKey = ""
            For i = 1 To level
                currentKey = currentKey & CStr(valueArray(row, hierarchyIndices(i))) & Chr(0)
                nextKey = nextKey & CStr(valueArray(nextRow, hierarchyIndices(i))) & Chr(0)
            Next i
            If currentKey <> nextKey Or row = numRows Then
                Dim totalRowData As Variant: totalRowData = dictLevels(level)(currentKey)
                ReDim rowData(1 To numCols)
                
                Dim parentLevel As Long
                For parentLevel = 1 To level - 1
                    rowData(hierarchyIndices(parentLevel)) = valueArray(row, hierarchyIndices(parentLevel))
                Next parentLevel
                
                rowData(hierarchyIndices(level)) = Space((level - 1) * 3) & valueArray(row, hierarchyIndices(level)) & " Total"
                
                For i = 1 To UBound(subtotalIndices): rowData(subtotalIndices(i)) = totalRowData(subtotalIndices(i)): Next
                outputCollection.Add rowData
                groupRows.Add outputCollection.Count
                dictLevels(level).Remove currentKey
            End If
        Next level
    Next row
    
    ReDim rowData(1 To numCols)
    rowData(hierarchyIndices(1)) = "Grand Total"
    For i = 1 To UBound(subtotalIndices): rowData(subtotalIndices(i)) = grandTotals(subtotalIndices(i)): Next
    outputCollection.Add rowData
    groupRows.Add outputCollection.Count
    
    ReDim outputArray(1 To outputCollection.Count, 1 To numCols)
    For row = 1 To outputCollection.Count
        rowData = outputCollection(row)
        For i = 1 To numCols: outputArray(row, i) = rowData(i): Next
    Next row
End Sub

Private Function CreateOutputSheet() As Worksheet
    Dim tempName As String: tempName = "Subtotal Report"
    On Error Resume Next
    Application.DisplayAlerts = False
    ThisWorkbook.Worksheets(tempName).Delete
    Application.DisplayAlerts = True
    On Error GoTo 0
    Set CreateOutputSheet = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(targetWorksheetName))
    CreateOutputSheet.Name = tempName
End Function

Private Sub ApplyFormattingAndGrouping(ws As Worksheet, groupRows As Collection, numLevels As Long, ByVal startDataRow As Long)
    Dim rowItem As Variant
    For Each rowItem In groupRows
        ws.Rows(rowItem + startDataRow - 1).Font.Bold = True
    Next rowItem
    ws.Outline.ShowLevels rowLevels:=numLevels + 1
End Sub

Private Sub RestoreExcelSettings(ByVal cancelled As Boolean)
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    If cancelled Then Application.StatusBar = "Operation cancelled." Else Application.StatusBar = False
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
End Sub

Private Function GetColumnIndexByText(colName As String, ws As Worksheet, ByVal headerRowNum As Long) As Long
    Dim lastCol As Long: lastCol = ws.Cells(headerRowNum, ws.Columns.Count).End(xlToLeft).Column
    Dim i As Long
    For i = 1 To lastCol
        If Trim(ws.Cells(headerRowNum, i).Text) = colName Then GetColumnIndexByText = i: Exit Function
    Next i
End Function

Public Sub QuickSort2DArray(ByRef dataArray As Variant, ByVal firstRow As Long, ByVal lastRow As Long, sortColIndices() As Long, ByRef formulaArray As Variant)
    Dim pivotRow As Long, i As Long, j As Long
    If firstRow < lastRow Then
        pivotRow = firstRow: i = firstRow: j = lastRow
        Do While i < j
            Do While CompareRows(dataArray, i, pivotRow, sortColIndices) <= 0 And i < lastRow: i = i + 1: Loop
            Do While CompareRows(dataArray, j, pivotRow, sortColIndices) > 0: j = j - 1: Loop
            If i < j Then SwapRows dataArray, i, j: SwapRows formulaArray, i, j
        Loop
        SwapRows dataArray, pivotRow, j: SwapRows formulaArray, pivotRow, j
        QuickSort2DArray dataArray, firstRow, j - 1, sortColIndices, formulaArray
        QuickSort2DArray dataArray, j + 1, lastRow, sortColIndices, formulaArray
    End If
End Sub

Private Function CompareRows(dataArray As Variant, row1 As Long, row2 As Long, sortColIndices() As Long) As Integer
    ' Compares two rows based on the hierarchy columns. Returns -1, 0, or 1.
    Dim i As Long, col As Long, val1 As Variant, val2 As Variant
    For i = LBound(sortColIndices) To UBound(sortColIndices)
        col = sortColIndices(i)
        val1 = dataArray(row1, col)
        val2 = dataArray(row2, col)
        
        ' --- FIX: Correctly structured If/ElseIf block ---
        If IsError(val1) And IsError(val2) Then
            ' Both are errors, treat as equal for this level, continue to next sort column.
        ElseIf IsError(val1) Then
            CompareRows = -1 ' Errors come before non-errors
            Exit Function
        ElseIf IsError(val2) Then
            CompareRows = 1 ' Non-errors come after errors
            Exit Function
        Else
            ' Neither is an error, so a direct comparison is safe.
            If val1 < val2 Then
                CompareRows = -1
                Exit Function
            ElseIf val1 > val2 Then
                CompareRows = 1
                Exit Function
            End If
        End If
    Next i
    CompareRows = 0 ' All sort columns are equal
End Function

Private Sub SwapRows(ByRef arr As Variant, row1 As Long, row2 As Long)
    ' Swaps two full rows in a 2D array.
    Dim i As Long, temp As Variant
    For i = LBound(arr, 2) To UBound(arr, 2)
        temp = arr(row1, i)
        arr(row1, i) = arr(row2, i)
        arr(row2, i) = temp
    Next i
End Sub
