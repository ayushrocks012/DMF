'====================================================================================
'== CODE FOR A NEW MODULE
'== This is the "In-Place" engine that works on a copy of the sheet.
'== REVISED: July 16, 2025 (Final Corrected Version)
'====================================================================================
Option Explicit

' --- Global variables to hold settings from the form ---
Public targetWorksheetName As String
Public hierarchyColNames As Collection
Public subtotalColNames As Collection
Public summaryBelow As Boolean
Public headerRow As Long
Public skipSort As Boolean

' --- Main entry points ---
Sub ShowSubtotalForm()
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
    Dim headerRowInput As String
    Do
        headerRowInput = InputBox("Please enter the header row number:", "Specify Header Row", "1")
        If headerRowInput = "" Then Exit Sub ' User cancelled
        If IsNumeric(headerRowRowInput) And CLng(headerRowInput) > 0 Then
            headerRow = CLng(headerRowInput)
            Exit Do
        Else
            MsgBox "Invalid input. Please enter a positive number for the row.", vbExclamation
        End If
    Loop
    frmMultiSubtotal.Show
End Sub

Sub CancelAndCleanup()
    Call RestoreExcelSettings(True)
End Sub

' --- IN-PLACE ENGINE CONTROLLER ---
Sub RunInPlaceSubtotal()
    On Error GoTo ErrorHandler
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Preparing to process..."
    
    Dim wsSource As Worksheet, wsOutput As Worksheet
    Dim hierarchyIndices() As Long, subtotalIndices() As Long
    Dim dataRange As Range
    
    Set wsSource = ThisWorkbook.Worksheets(targetWorksheetName)
    
    ' --- Create a copy of the sheet to work on ---
    Application.StatusBar = "Creating a copy of the worksheet..."
    wsSource.Copy After:=wsSource
    Set wsOutput = ActiveSheet ' The new copy becomes the active sheet
    
    ' Rename the new sheet to avoid conflicts
    Dim copyName As String, i As Integer
    i = 1
    On Error Resume Next
    Do
        copyName = wsSource.Name & " (Subtotals " & i & ")"
        If ThisWorkbook.Worksheets(copyName) Is Nothing Then
            wsOutput.Name = copyName
            Exit Do
        End If
        i = i + 1
    Loop
    On Error GoTo ErrorHandler
    
    ' --- 1. PREPARE SHEET AND GET INDICES (on the new sheet) ---
    If Not PrepareSheetAndGetIndices(wsOutput, hierarchyIndices, subtotalIndices, dataRange) Then GoTo Cleanup
    
    ' --- 2. SORT DATA (IF REQUESTED) ---
    If Not skipSort Then
        Application.StatusBar = "Sorting data..."
        SortDataInPlace wsOutput, dataRange, hierarchyIndices
    End If
    
    ' --- 3. APPLY NATIVE SUBTOTALS ---
    Application.StatusBar = "Inserting subtotal rows..."
    ApplyNativeSubtotals dataRange, hierarchyIndices, subtotalIndices
    
    ' --- 4. POST-PROCESS TO FIX LABELS ---
    Application.StatusBar = "Formatting report and adjusting labels..."
    PostProcessSubtotals wsOutput, dataRange, hierarchyIndices, subtotalIndices
    
    wsOutput.Columns.AutoFit
    Application.StatusBar = "Process complete!"
    
Cleanup:
    Call RestoreExcelSettings(False)
    Exit Sub
    
ErrorHandler:
    MsgBox "An unexpected error occurred: " & vbCrLf & Err.Description, vbCritical, "Subtotal Tool Error"
    Resume Cleanup
End Sub

' --- In-Place Engine Sub-Procedures ---

Private Function PrepareSheetAndGetIndices(ws As Worksheet, ByRef hierarchyIndices() As Long, ByRef subtotalIndices() As Long, ByRef dataRange As Range) As Boolean
    Application.StatusBar = "Validating selections..."
    ws.Cells.RemoveSubtotal
    Dim i As Long, colIdx As Long, lastCol As Long, lastRow As Long
    ReDim hierarchyIndices(1 To hierarchyColNames.Count)
    ReDim subtotalIndices(1 To subtotalColNames.Count)
    For i = 1 To hierarchyColNames.Count
        colIdx = GetColumnIndexByText(hierarchyColNames(i), ws, headerRow)
        If colIdx = 0 Then MsgBox "Could not find HIERARCHY column '" & hierarchyColNames(i) & "'", vbCritical: Exit Function
        hierarchyIndices(i) = colIdx
    Next i
    For i = 1 To subtotalColNames.Count
        colIdx = GetColumnIndexByText(subtotalColNames(i), ws, headerRow)
        If colIdx = 0 Then MsgBox "Could not find SUBTOTAL column '" & subtotalColNames(i) & "'", vbCritical: Exit Function
        subtotalIndices(i) = colIdx
    Next i
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    lastRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    If lastRow <= headerRow Then MsgBox "No data found below header row.", vbInformation: Exit Function
    Set dataRange = ws.Range(ws.Cells(headerRow, 1), ws.Cells(lastRow, lastCol))
    PrepareSheetAndGetIndices = True
End Function

Private Sub SortDataInPlace(ws As Worksheet, dataRange As Range, hierarchyIndices() As Long)
    Dim i As Long
    With ws.Sort
        .SortFields.Clear
        For i = 1 To UBound(hierarchyIndices)
            .SortFields.Add Key:=ws.Columns(hierarchyIndices(i)), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        Next i
        .SetRange dataRange
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub

Private Sub ApplyNativeSubtotals(dataRange As Range, hierarchyIndices() As Long, subtotalIndices() As Long)
    ' Apply subtotals from highest level to lowest. This correctly inserts all needed rows.
    dataRange.Subtotal GroupBy:=hierarchyIndices(1), _
                       Function:=xlSum, _
                       TotalList:=subtotalIndices, _
                       Replace:=True, _
                       PageBreaks:=False, _
                       SummaryBelowData:=summaryBelow
                       
    If UBound(hierarchyIndices) > 1 Then
        Dim i As Long
        For i = 2 To UBound(hierarchyIndices)
            dataRange.Subtotal GroupBy:=hierarchyIndices(i), _
                               Function:=xlSum, _
                               TotalList:=subtotalIndices, _
                               Replace:=False, _
                               PageBreaks:=False, _
                               SummaryBelowData:=summaryBelow
        Next i
    End If
End Sub

'==============================================================================
'== POST-PROCESS SUBTOTALS (Final Corrected Version)
'== This version robustly finds the correct data row for context and
'== rebuilds all labels from scratch, fixing all known issues.
'==============================================================================
Private Sub PostProcessSubtotals(ws As Worksheet, dataRange As Range, hierarchyIndices() As Long, subtotalIndices() As Long)
    Dim lastRow As Long, r As Long, sourceRow As Long, searchRow As Long
    Dim totalLevel As Long, parentLevel As Long, level As Long
    Dim totalLabel As String
    Dim firstSubtotalCol As Long

    ' Use the first subtotal column to reliably identify total vs. data rows.
    firstSubtotalCol = subtotalIndices(1)

    lastRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row

    ' Loop from the bottom up for stability.
    For r = lastRow To headerRow + 1 Step -1
        
        ' Check if the current row is a total row by looking for the SUBTOTAL formula.
        If InStr(1, ws.Cells(r, firstSubtotalCol).Formula, "SUBTOTAL", vbTextCompare) = 0 Then
            ' It's a data row (no SUBTOTAL formula), so skip it.
            GoTo NextIteration
        End If
        
        ' --- This is a Total Row ---
        totalLevel = 0
        
        ' Find the level of this total by finding the right-most hierarchy column that Excel populated.
        For level = UBound(hierarchyIndices) To 1 Step -1
            If Not IsEmpty(ws.Cells(r, hierarchyIndices(level)).Value) Then
                ' Check if it's the Grand Total row. If so, we'll skip it for now.
                If InStr(1, CStr(ws.Cells(r, hierarchyIndices(level)).Value), "Grand Total", vbTextCompare) > 0 Then
                    totalLevel = 0 ' Mark as Grand Total to skip
                    Exit For
                End If
                totalLevel = level
                Exit For
            End If
        Next level
        
        ' If we identified a valid subtotal level (i.e., not Grand Total)
        If totalLevel > 0 Then
            ' Find the correct source data row. This is the most critical part.
            sourceRow = 0
            searchRow = r
            Do
                ' Move in the correct direction based on user's choice
                If summaryBelow Then searchRow = searchRow - 1 Else searchRow = searchRow + 1
                
                ' Exit if we go out of the sheet's bounds
                If searchRow <= headerRow Or searchRow > ws.Rows.Count Then Exit Do
                
                ' Check if the search row is a data row (i.e., does NOT have a SUBTOTAL formula)
                If InStr(1, ws.Cells(searchRow, firstSubtotalCol).Formula, "SUBTOTAL", vbTextCompare) = 0 Then
                    sourceRow = searchRow ' We found it!
                    Exit Do
                End If
            Loop
            
            ' If we found a valid source data row, proceed with formatting
            If sourceRow > 0 Then
                ' Re-construct the total label from the source row's clean data
                totalLabel = ws.Cells(sourceRow, hierarchyIndices(totalLevel)).Value & " Total"
                
                ' Clear all hierarchy columns on the total row to erase the messy labels
                ws.Range(ws.Cells(r, hierarchyIndices(1)), ws.Cells(r, hierarchyIndices(UBound(hierarchyIndices)))).ClearContents
                
                ' Write the new, correct label into its proper column
                ws.Cells(r, hierarchyIndices(totalLevel)).Value = totalLabel
                
                ' Populate all parent hierarchy values for context, using the source row
                For parentLevel = 1 To totalLevel - 1
                    ws.Cells(r, hierarchyIndices(parentLevel)).Value = ws.Cells(sourceRow, hierarchyIndices(parentLevel)).Value
                Next parentLevel
            End If
        End If
NextIteration:
    Next r
End Sub


Private Sub RestoreExcelSettings(ByVal cancelled As Boolean)
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    If cancelled Then Application.StatusBar = "Operation cancelled." Else Application.StatusBar = False
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
End Sub

Private Function GetColumnIndexByText(colName As String, ws As Worksheet, ByVal headerRowNum As Long) As Long
    Dim findRange As Range
    Set findRange = ws.Rows(headerRowNum).Find(What:=colName, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    If Not findRange Is Nothing Then GetColumnIndexByText = findRange.Column Else GetColumnIndexByText = 0
End Function
