'====================================================================================
'== CODE FOR THE USERFORM: frmMultiSubtotal
'== This code does not need to be changed.
'====================================================================================

Option Explicit

' --- Form Control Event Handlers ---

Private Sub btnAddHierarchy_Click()
    Call MoveListItem(lstAvailableCols, lstHierarchyOrder)
End Sub

Private Sub btnRemoveHierarchy_Click()
    Call MoveListItem(lstHierarchyOrder, lstAvailableCols)
End Sub

Private Sub btnAddSubtotal_Click()
    Call MoveListItem(lstAvailableCols, lstSubtotalCols)
End Sub

Private Sub btnRemoveSubtotal_Click()
    Call MoveListItem(lstSubtotalCols, lstAvailableCols)
End Sub

Private Sub btnCancel_Click()
    ' Unload the form without doing anything
    Unload Me
End Sub

Private Sub btnDown_Click()
    Call MoveListItemUpDown(lstHierarchyOrder, 1) ' 1 for Down
End Sub

Private Sub btnUp_Click()
    Call MoveListItemUpDown(lstHierarchyOrder, -1) ' -1 for Up
End Sub

Private Sub btnOK_Click()
    ' --- VALIDATION ---
    If lstHierarchyOrder.ListCount = 0 Then
        MsgBox "Please select at least one column for the hierarchy.", vbExclamation, "Input Required"
        Exit Sub
    End If
    
    If lstSubtotalCols.ListCount = 0 Then
        MsgBox "Please select at least one column to subtotal.", vbExclamation, "Input Required"
        Exit Sub
    End If
    
    ' --- POPULATE GLOBAL COLLECTIONS ---
    ' Directly access the public variables from the module
    Set hierarchyColNames = New Collection
    Dim i As Long
    For i = 0 To lstHierarchyOrder.ListCount - 1
        hierarchyColNames.Add lstHierarchyOrder.List(i)
    Next i
    
    Set subtotalColNames = New Collection
    For i = 0 To lstSubtotalCols.ListCount - 1
        subtotalColNames.Add lstSubtotalCols.List(i)
    Next i
    
    summaryBelow = Me.optSummaryBelow.Value
    
    ' --- HIDE FORM AND RUN MAIN SUB ---
    Me.Hide
    ' Directly call the public sub from the module
    Call RunMultiLevelSubtotal
    
    ' --- CLEANUP ---
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    ' --- FIX: Ensure RowSource is clear to allow AddItem to work ---
    Me.lstAvailableCols.RowSource = ""
    Me.lstHierarchyOrder.RowSource = ""
    Me.lstSubtotalCols.RowSource = ""

    ' --- Default settings ---
    Me.optSummaryBelow.Value = True
    
    ' --- Populate the available columns listbox from the specified header row ---
    Dim ws As Worksheet
    Set ws = ActiveSheet
    
    If ws Is Nothing Then Exit Sub
    
    Dim lastCol As Long
    ' Use the globally available headerRow variable directly
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    
    Dim i As Long
    For i = 1 To lastCol
        ' Use the globally available headerRow variable directly
        Dim headerValue As String
        ' FIX: Use .Text to get the displayed value (e.g., "Jan-23") not the underlying value (e.g., 01/01/2023)
        headerValue = Trim(ws.Cells(headerRow, i).Text)
        
        If headerValue <> "" Then
            Me.lstAvailableCols.AddItem headerValue ' Add the clean, displayed value
        End If
    Next i
End Sub


' --- Helper Subroutines for ListBox manipulation ---

Private Sub MoveListItem(sourceList As MSForms.ListBox, destList As MSForms.ListBox)
    Dim i As Long
    ' Loop backwards because we are removing items
    For i = sourceList.ListCount - 1 To 0 Step -1
        If sourceList.Selected(i) Then
            destList.AddItem sourceList.List(i)
            sourceList.RemoveItem i
        End If
    Next i
End Sub

Private Sub MoveListItemUpDown(lb As MSForms.ListBox, direction As Integer)
    Dim selectedIdx As Long
    selectedIdx = lb.ListIndex
    
    ' Check if an item is selected and if it can be moved
    If selectedIdx = -1 Then Exit Sub
    If direction = -1 And selectedIdx = 0 Then Exit Sub ' Already at top
    If direction = 1 And selectedIdx = lb.ListCount - 1 Then Exit Sub ' Already at bottom
    
    Dim temp As String
    temp = lb.List(selectedIdx)
    
    ' Swap with the item in the target direction
    lb.List(selectedIdx) = lb.List(selectedIdx + direction)
    lb.List(selectedIdx + direction) = temp
    
    ' Keep the moved item selected
    lb.Selected(selectedIdx + direction) = True
End Sub


'====================================================================================
'== CODE FOR THE MODULE: Module1 (or any other name)
'== In the VBE, go to Insert -> Module.
'== Paste this entire section into that module's code window.
'====================================================================================

Option Explicit

' --- Global variables to hold settings from the form ---
' Public scope makes them available to the entire VBA project (including the form)
Public hierarchyColNames As Collection
Public subtotalColNames As Collection
Public summaryBelow As Boolean
Public headerRow As Long

' --- Main Subroutine to be called by the user ---
Sub ShowSubtotalForm()
    ' This sub initializes the process, asks for the header row, and shows the form
    
    ' Clear old collections in case of error on previous run
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
    
    Dim headerRowInput As String
    
    ' Loop until a valid number is entered
    Do
        headerRowInput = InputBox("Please enter the header row number:", "Specify Header Row", "1")
        
        ' Exit if user cancels
        If headerRowInput = "" Then Exit Sub
        
        ' Check if it's a valid positive number
        If IsNumeric(headerRowInput) And CLng(headerRowInput) > 0 Then
            headerRow = CLng(headerRowInput)
            Exit Do
        Else
            MsgBox "Invalid input. Please enter a positive number for the row.", vbExclamation
        End If
    Loop
    
    frmMultiSubtotal.Show
End Sub

' --- Helper function to find a column by its displayed text ---
Private Function GetColumnIndexByText(colName As String, ws As Worksheet, ByVal headerRowNum As Long) As Long
    ' Helper function to find a column index by its displayed text, not its underlying value.
    ' This correctly handles formatted dates, numbers, etc.
    Dim lastCol As Long
    lastCol = ws.Cells(headerRowNum, ws.Columns.Count).End(xlToLeft).Column
    
    Dim i As Long
    For i = 1 To lastCol
        ' Compare the clean, displayed text of the cell with the desired column name
        If Trim(ws.Cells(headerRowNum, i).Text) = colName Then
            GetColumnIndexByText = i
            Exit Function
        End If
    Next i
    
    ' Return 0 if not found, which we can check for
    GetColumnIndexByText = 0
End Function


' --- Core logic, called from the form ---
Sub RunMultiLevelSubtotal()
    Dim ws As Worksheet
    Set ws = ActiveSheet
    
    On Error GoTo ErrorHandler
    
    ' --- 0. PREPARATION ---
    ' SPEED BOOST: Disable events, screen updating, and calculations for maximum speed.
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Preparing to process subtotals..."
    
    ' Clear any previous subtotals and outlines
    ws.Cells.RemoveSubtotal
    ws.Cells.ClearOutline
    
    ' --- 1. GET COLUMN INDICES ---
    Application.StatusBar = "Validating column selections..."
    Dim hierarchyColIndices() As Long
    ReDim hierarchyColIndices(1 To hierarchyColNames.Count)
    
    Dim subtotalColIndices() As Long
    ReDim subtotalColIndices(1 To subtotalColNames.Count)
    
    Dim i As Long
    Dim colIdx As Long
    
    For i = 1 To hierarchyColNames.Count
        colIdx = GetColumnIndexByText(hierarchyColNames(i), ws, headerRow)
        If colIdx = 0 Then
            MsgBox "Could not find the HIERARCHY column '" & hierarchyColNames(i) & "' in header row " & headerRow & "." & vbCrLf & vbCrLf & "Please check for spelling mistakes.", vbCritical, "Column Not Found"
            GoTo Cleanup
        End If
        hierarchyColIndices(i) = colIdx
    Next i
    
    For i = 1 To subtotalColNames.Count
        colIdx = GetColumnIndexByText(subtotalColNames(i), ws, headerRow)
        If colIdx = 0 Then
            MsgBox "Could not find the SUBTOTAL column '" & subtotalColNames(i) & "' in header row " & headerRow & "." & vbCrLf & vbCrLf & "Please check for spelling mistakes.", vbCritical, "Column Not Found"
            GoTo Cleanup
        End If
        subtotalColIndices(i) = colIdx
    Next i
    
    ' --- 2. SORT DATA ---
    Application.StatusBar = "Sorting data by hierarchy. This may take a moment for large datasets..."
    Dim dataRange As Range
    Dim lastRow As Long
    Dim lastCol As Long

    ' Define the data range robustly
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    On Error Resume Next
    lastRow = ws.Cells.Find(What:="*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
    On Error GoTo ErrorHandler

    If lastRow = 0 Or lastRow < headerRow Then
        MsgBox "No data found below the specified header row.", vbInformation, "Empty Data"
        GoTo Cleanup
    End If

    Set dataRange = ws.Range(ws.Cells(headerRow, 1), ws.Cells(lastRow, lastCol))
    
    With ws.Sort
        .SortFields.Clear
        For i = 1 To UBound(hierarchyColIndices)
            .SortFields.Add Key:=ws.Columns(hierarchyColIndices(i)), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        Next i
        .SetRange dataRange
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    ' --- 3. APPLY SUBTOTALS ---
    Dim totalLevels As Long
    totalLevels = UBound(hierarchyColIndices)
    
    ' First, apply the subtotal for the most detailed (last) hierarchy level
    Application.StatusBar = "Applying subtotal level 1 of " & totalLevels & ": " & hierarchyColNames(totalLevels) & "..."
    dataRange.Subtotal GroupBy:=hierarchyColIndices(totalLevels), _
                       Function:=xlSum, _
                       TotalList:=subtotalColIndices, _
                       Replace:=True, _
                       PageBreaks:=False, _
                       SummaryBelowData:=summaryBelow
                       
    ' Now, loop through the remaining hierarchy levels from second-to-last up to the first
    If totalLevels > 1 Then
        Dim levelCounter As Long
        levelCounter = 2
        For i = totalLevels - 1 To 1 Step -1
            Application.StatusBar = "Applying subtotal level " & levelCounter & " of " & totalLevels & ": " & hierarchyColNames(i) & "..."
            dataRange.Subtotal GroupBy:=hierarchyColIndices(i), _
                               Function:=xlSum, _
                               TotalList:=subtotalColIndices, _
                               Replace:=False, _
                               PageBreaks:=False, _
                               SummaryBelowData:=summaryBelow
            levelCounter = levelCounter + 1
        Next i
    End If
    
    Application.StatusBar = "Finalizing..."
    ' SPEED BOOST: AutoFit is very slow on large datasets. It is commented out.
    ' The user can manually AutoFit columns after the macro runs if needed.
    ' ws.Columns.AutoFit
    
    Application.StatusBar = "Process complete!"

Cleanup:
    ' --- 4. CLEANUP ---
    ' Always restore Excel's settings, even if an error occurs.
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    ' Reset the status bar so it disappears
    Application.StatusBar = False
    Set ws = Nothing
    Set dataRange = Nothing
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "An unexpected error occurred: " & vbCrLf & Err.Description, vbCritical, "Subtotal Tool Error"
    ' Make sure to reset settings on error too
    Resume Cleanup
End Sub
