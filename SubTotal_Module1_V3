'====================================================================================
'== CODE FOR A NEW MODULE
'== This is the "In-Place" engine that works on a copy of the sheet.
'== REVISED: July 16, 2025 (Definitive Manual Engine v2)
'====================================================================================
Option Explicit

' --- Global variables to hold settings from the form ---
Public targetWorksheetName As String
Public hierarchyColNames As Collection
Public subtotalColNames As Collection
Public summaryBelow As Boolean
Public headerRow As Long
Public skipSort As Boolean

' --- Main entry points ---
Sub ShowSubtotalForm()
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
    Dim headerRowInput As String
    Do
        headerRowInput = InputBox("Please enter the header row number:", "Specify Header Row", "1")
        If headerRowInput = "" Then Exit Sub ' User cancelled
        If IsNumeric(headerRowInput) And CLng(headerRowInput) > 0 Then
            headerRow = CLng(headerRowInput)
            Exit Do
        Else
            MsgBox "Invalid input. Please enter a positive number for the row.", vbExclamation
        End If
    Loop
    frmMultiSubtotal.Show
End Sub

Sub CancelAndCleanup()
    Call RestoreExcelSettings(True)
End Sub

' --- IN-PLACE ENGINE CONTROLLER ---
Sub RunInPlaceSubtotal()
    On Error GoTo ErrorHandler
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Preparing to process..."
    
    Dim wsSource As Worksheet, wsOutput As Worksheet
    Dim hierarchyIndices() As Long, subtotalIndices() As Long
    Dim dataRange As Range
    
    Set wsSource = ThisWorkbook.Worksheets(targetWorksheetName)
    
    ' --- Create a copy of the sheet to work on ---
    Application.StatusBar = "Creating a copy of the worksheet..."
    wsSource.Copy After:=wsSource
    Set wsOutput = ActiveSheet
    
    ' Rename the new sheet
    Dim copyName As String, i As Integer: i = 1
    On Error Resume Next
    Do
        copyName = wsSource.Name & " (Subtotals " & i & ")"
        If ThisWorkbook.Worksheets(copyName) Is Nothing Then
            wsOutput.Name = copyName
            Exit Do
        End If
        i = i + 1
    Loop
    On Error GoTo ErrorHandler
    
    ' --- 1. PREPARE SHEET AND GET INDICES ---
    If Not PrepareSheetAndGetIndices(wsOutput, hierarchyIndices, subtotalIndices, dataRange) Then GoTo Cleanup
    
    ' --- 2. SORT DATA (IF REQUESTED) ---
    If Not skipSort Then
        Application.StatusBar = "Sorting data..."
        SortDataInPlace wsOutput, dataRange, hierarchyIndices
    End If
    
    ' --- 3. CREATE SUBTOTALS MANUALLY ---
    Application.StatusBar = "Creating subtotals..."
    CreateManualSubtotals wsOutput, headerRow, hierarchyIndices, subtotalIndices
    
    wsOutput.Columns.AutoFit
    Application.StatusBar = "Process complete!"
    
Cleanup:
    Call RestoreExcelSettings(False)
    Exit Sub
    
ErrorHandler:
    MsgBox "An unexpected error occurred: " & vbCrLf & Err.Description, vbCritical, "Subtotal Tool Error"
    Resume Cleanup
End Sub

' --- Engine Sub-Procedures ---

Private Function PrepareSheetAndGetIndices(ws As Worksheet, ByRef hierarchyIndices() As Long, ByRef subtotalIndices() As Long, ByRef dataRange As Range) As Boolean
    ws.Cells.ClearOutline
    ws.Cells.RemoveSubtotal ' Clear any previous attempts
    Dim i As Long, colIdx As Long, lastCol As Long, lastRow As Long
    ReDim hierarchyIndices(1 To hierarchyColNames.Count)
    ReDim subtotalIndices(1 To subtotalColNames.Count)
    For i = 1 To hierarchyColNames.Count
        colIdx = GetColumnIndexByText(hierarchyColNames(i), ws, headerRow)
        If colIdx = 0 Then MsgBox "Could not find HIERARCHY column '" & hierarchyColNames(i) & "'", vbCritical: Exit Function
        hierarchyIndices(i) = colIdx
    Next i
    For i = 1 To subtotalColNames.Count
        colIdx = GetColumnIndexByText(subtotalColNames(i), ws, headerRow)
        If colIdx = 0 Then MsgBox "Could not find SUBTOTAL column '" & subtotalColNames(i) & "'", vbCritical: Exit Function
        subtotalIndices(i) = colIdx
    Next i
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    lastRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    If lastRow <= headerRow Then MsgBox "No data found below header row.", vbInformation: Exit Function
    Set dataRange = ws.Range(ws.Cells(headerRow, 1), ws.Cells(lastRow, lastCol))
    PrepareSheetAndGetIndices = True
End Function

Private Sub SortDataInPlace(ws As Worksheet, dataRange As Range, hierarchyIndices() As Long)
    Dim i As Long
    With ws.Sort
        .SortFields.Clear
        For i = 1 To UBound(hierarchyIndices)
            .SortFields.Add Key:=ws.Columns(hierarchyIndices(i)), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        Next i
        .SetRange dataRange
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub

'==============================================================================
'== CREATE MANUAL SUBTOTALS (Definitive Manual Engine v2)
'== This new engine uses robust, safe methods for all operations.
'==============================================================================
Private Sub CreateManualSubtotals(ws As Worksheet, ByVal headerRowNum As Long, hierarchyIndices() As Long, subtotalIndices() As Long)
    Dim lastDataRow As Long, r As Long, level As Long, parentLevel As Long, sc As Long
    Dim groupStartRow As Long
    Dim insertAt As Long, formulaStartRow As Long, formulaEndRow As Long
    Dim totalLabel As String, colLetter As String, formulaRange As String
    Dim groupRange As Range

    lastDataRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    groupStartRow = lastDataRow ' Initialize for the first group from the bottom

    ' --- Loop from the bottom up to insert subtotals ---
    For r = lastDataRow To headerRowNum + 1 Step -1
        For level = UBound(hierarchyIndices) To 1 Step -1
            ' Check if the group has changed at this level, or if it's the very first data row
            ' Using CStr for safe comparison to avoid errors on non-text values
            If CStr(ws.Cells(r, hierarchyIndices(level)).Value) <> CStr(ws.Cells(r - 1, hierarchyIndices(level)).Value) Or r = headerRowNum + 1 Then
                
                formulaStartRow = r
                formulaEndRow = groupStartRow
                
                If summaryBelow Then
                    insertAt = formulaEndRow + 1
                Else ' Summary Above
                    insertAt = formulaStartRow
                End If
                
                ' Insert the row
                ws.Rows(insertAt).Insert
                
                ' Write labels and parent values
                totalLabel = ws.Cells(formulaStartRow, hierarchyIndices(level)).Value & " Total"
                ws.Cells(insertAt, hierarchyIndices(level)).Value = totalLabel
                For parentLevel = 1 To level - 1
                    ws.Cells(insertAt, hierarchyIndices(parentLevel)).Value = ws.Cells(formulaStartRow, hierarchyIndices(parentLevel)).Value
                Next parentLevel
                
                ' Write the SUBTOTAL formulas (with corrected logic)
                For sc = 1 To UBound(subtotalIndices)
                    colLetter = Split(ws.Cells(1, subtotalIndices(sc)).Address, "$")(1)
                    If summaryBelow Then
                        ' When inserting below, the original range does not shift
                        formulaRange = colLetter & formulaStartRow & ":" & colLetter & formulaEndRow
                    Else
                        ' When inserting above, the original range shifts down by 1
                        formulaRange = colLetter & formulaStartRow + 1 & ":" & colLetter & formulaEndRow + 1
                    End If
                    ws.Cells(insertAt, subtotalIndices(sc)).Formula = "=SUBTOTAL(9," & formulaRange & ")"
                Next sc
                
                ' Create the outline group using the robust .Group method
                If summaryBelow Then
                    Set groupRange = ws.Rows(formulaStartRow & ":" & formulaEndRow)
                Else ' Summary Above
                    Set groupRange = ws.Rows(insertAt + 1 & ":" & formulaEndRow + 1)
                End If
                groupRange.Group
                
                ' Update the groupStartRow for the next group
                groupStartRow = r - 1
            End If
        Next level
    Next r

    ' --- Insert Grand Total ---
    lastDataRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    If summaryBelow Then
        insertAt = lastDataRow + 1
    Else ' Summary Above
        insertAt = headerRowNum + 1
    End If
    ws.Rows(insertAt).Insert
    ws.Cells(insertAt, hierarchyIndices(1)).Value = "Grand Total"
    ws.Rows(insertAt).Font.Bold = True
    For sc = 1 To UBound(subtotalIndices)
        colLetter = Split(ws.Cells(1, subtotalIndices(sc)).Address, "$")(1)
        If summaryBelow Then
            ws.Cells(insertAt, subtotalIndices(sc)).Formula = "=SUBTOTAL(9," & colLetter & headerRowNum + 1 & ":" & lastDataRow & ")"
        Else
            ws.Cells(insertAt, subtotalIndices(sc)).Formula = "=SUBTOTAL(9," & colLetter & headerRowNum + 2 & ":" & lastDataRow + 1 & ")"
        End If
    Next sc
End Sub

Private Sub RestoreExcelSettings(ByVal cancelled As Boolean)
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    If cancelled Then Application.StatusBar = "Operation cancelled." Else Application.StatusBar = False
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
End Sub

Private Function GetColumnIndexByText(colName As String, ws As Worksheet, ByVal headerRowNum As Long) As Long
    Dim findRange As Range
    Set findRange = ws.Rows(headerRowNum).Find(What:=colName, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    If Not findRange Is Nothing Then GetColumnIndexByText = findRange.Column Else GetColumnIndexByText = 0
End Function
