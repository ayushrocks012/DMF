'====================================================================================
'== CODE FOR A NEW MODULE (e.g., Module1)
'== DESCRIPTION: This is the "In-Place" engine that works on a copy of the sheet.
'==              It contains the core logic for the subtotal creation process.
'== VERSION:     4.4 (Definitive Logic and Formatting Fix)
'====================================================================================
Option Explicit

' --- Constants ---
Private Const SUBTOTAL_FUNCTION_SUM As Long = 9 ' The function number for SUM in SUBTOTAL()
Private Const GRAND_TOTAL_LABEL As String = "Grand Total"
Private Const TOTAL_LABEL_SUFFIX As String = " Total"
Private Const HEADER_ROW_PROMPT As String = "Please enter the header row number for your data:"
Private Const HEADER_ROW_TITLE As String = "Specify Header Row"
Private Const DEFAULT_HEADER_ROW As String = "1"

' --- Global variables to hold settings from the UserForm ---
Public targetWorksheetName As String
Public hierarchyColNames As Collection
Public subtotalColNames As Collection
Public summaryBelow As Boolean
Public headerRow As Long
Public skipSort As Boolean


'==============================================================================
' --- Public Entry Points ---
'==============================================================================

Sub ShowSubtotalForm()
    ' The main entry point called by the user (e.g., from a button).
    ' It prompts for the header row, then shows the main form.
    
    ' Reset global collections
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
    
    Dim headerRowInput As String
    Do
        headerRowInput = InputBox(HEADER_ROW_PROMPT, HEADER_ROW_TITLE, DEFAULT_HEADER_ROW)
        
        If headerRowInput = "" Then Exit Sub ' User pressed Cancel
        
        If IsNumeric(headerRowInput) And CLng(headerRowInput) > 0 Then
            headerRow = CLng(headerRowInput)
            frmMultiSubtotal.Show
            Exit Sub ' Exit after form is closed and code has run
        Else
            MsgBox "Invalid input. Please enter a positive number for the row.", vbExclamation
        End If
    Loop
End Sub

Sub CancelAndCleanup()
    ' Public routine to be called if the operation is cancelled from the form.
    Call RestoreApplicationSettings(True)
End Sub


'==============================================================================
' --- Main Controller ---
'==============================================================================

Sub RunInPlaceSubtotal()
    ' This is the main controller procedure. It orchestrates the entire
    ' subtotaling process from start to finish.
    
    On Error GoTo ErrorHandler
    
    Call SetupApplicationSettings
    
    Dim wsSource As Worksheet, wsOutput As Worksheet
    Dim hierarchyIndices() As Long, subtotalIndices() As Long
    Dim dataRange As Range
    
    Set wsSource = ThisWorkbook.Worksheets(targetWorksheetName)
    
    ' --- Step 1: Create a safe working copy of the sheet ---
    Set wsOutput = CreateWorkingCopy(wsSource)
    
    ' --- Step 2: Prepare the new sheet and get column indices ---
    If Not PrepareSheetAndGetIndices(wsOutput, hierarchyIndices, subtotalIndices, dataRange) Then
        GoTo Cleanup ' Exit if preparation fails (e.g., columns not found)
    End If
    
    ' --- Step 3: Sort the data if requested by the user ---
    If Not skipSort Then
        Call ApplySorting(wsOutput, dataRange, hierarchyIndices)
    End If
    
    ' --- Step 4: Create the multi-level subtotals (the core engine) ---
    Call CreateLevelSubtotals(wsOutput, headerRow, hierarchyIndices, subtotalIndices)
    
    ' --- Step 5: Add the final Grand Total row ---
    Call InsertGrandTotalRow(wsOutput, headerRow, hierarchyIndices, subtotalIndices)
    
    ' --- Step 6: Finalize the sheet appearance ---
    wsOutput.Columns.AutoFit
    wsOutput.Activate
    wsOutput.Cells(1, 1).Select
    
    Application.StatusBar = "Process complete!"

Cleanup:
    ' Restore Excel settings regardless of success or failure
    Call RestoreApplicationSettings(False)
    Exit Sub
    
ErrorHandler:
    ' Display a detailed error message and perform cleanup
    MsgBox "An unexpected error occurred:" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description:  " & Err.Description, vbCritical, "Subtotal Tool Error"
    Resume Cleanup
End Sub


'==============================================================================
' --- Core Engine Procedures ---
'==============================================================================

Private Function CreateWorkingCopy(wsSource As Worksheet) As Worksheet
    ' Creates a copy of the source worksheet to ensure the original data is untouched.
    ' Names the new sheet uniquely.
    Application.StatusBar = "Creating a copy of the worksheet..."
    
    wsSource.Copy After:=wsSource
    Dim wsCopy As Worksheet
    Set wsCopy = ActiveSheet
    
    ' Find a unique name for the new sheet
    Dim copyName As String, i As Integer: i = 1
    On Error Resume Next
    Do
        copyName = wsSource.Name & " (Subtotals " & i & ")"
        ' Check if a sheet with this name already exists
        If ThisWorkbook.Worksheets(copyName) Is Nothing Then
            wsCopy.Name = copyName
            Exit Do
        End If
        i = i + 1
    Loop
    On Error GoTo 0 ' Resume normal error handling
    
    Set CreateWorkingCopy = wsCopy
End Function

Private Function PrepareSheetAndGetIndices(ws As Worksheet, ByRef hierarchyIndices() As Long, ByRef subtotalIndices() As Long, ByRef dataRange As Range) As Boolean
    ' Prepares the worksheet by clearing old outlines/subtotals and finds the
    ' column index numbers for all specified hierarchy and subtotal columns.
    Application.StatusBar = "Preparing sheet and validating columns..."
    
    ws.Cells.ClearOutline
    ws.Cells.RemoveSubtotal
    
    Dim i As Long, colIdx As Long, lastCol As Long, lastRow As Long
    
    ' Get hierarchy column indices
    ReDim hierarchyIndices(1 To hierarchyColNames.Count)
    For i = 1 To hierarchyColNames.Count
        colIdx = GetColumnIndexByText(hierarchyColNames(i), ws, headerRow)
        If colIdx = 0 Then
            MsgBox "Could not find HIERARCHY column '" & hierarchyColNames(i) & "'.", vbCritical
            Exit Function
        End If
        hierarchyIndices(i) = colIdx
    Next i
    
    ' Get subtotal column indices
    ReDim subtotalIndices(1 To subtotalColNames.Count)
    For i = 1 To subtotalColNames.Count
        colIdx = GetColumnIndexByText(subtotalColNames(i), ws, headerRow)
        If colIdx = 0 Then
            MsgBox "Could not find SUBTOTAL column '" & subtotalColNames(i) & "'.", vbCritical
            Exit Function
        End If
        subtotalIndices(i) = colIdx
    Next i
    
    ' Define the main data range
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    lastRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    
    If lastRow <= headerRow Then
        MsgBox "No data found below the specified header row.", vbInformation
        Exit Function
    End If
    
    Set dataRange = ws.Range(ws.Cells(headerRow + 1, 1), ws.Cells(lastRow, lastCol))
    PrepareSheetAndGetIndices = True
End Function

Private Sub ApplySorting(ws As Worksheet, dataRangeWithHeaders As Range, hierarchyIndices() As Long)
    ' Sorts the data range by all hierarchy columns in their specified order.
    Application.StatusBar = "Sorting data..."
    
    Dim i As Long
    With ws.Sort
        .SortFields.Clear
        For i = 1 To UBound(hierarchyIndices)
            .SortFields.Add Key:=ws.Columns(hierarchyIndices(i)), SortOn:=xlSortOnValues, Order:=xlAscending
        Next i
        .SetRange ws.Range(ws.Cells(headerRow, 1), dataRangeWithHeaders.Cells(dataRangeWithHeaders.Rows.Count, dataRangeWithHeaders.Columns.Count))
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .Apply
    End With
End Sub

Private Sub CreateLevelSubtotals(ws As Worksheet, ByVal headerRowNum As Long, hierarchyIndices() As Long, subtotalIndices() As Long)
    ' This is the definitive manual engine. It processes level-by-level from the
    ' most detailed to the highest, inserting subtotal rows and creating outline groups.
    
    Dim lastDataRow As Long, r As Long, level As Long, parentLevel As Long, sc As Long
    Dim groupStartRowInLevel As Long
    Dim insertAtRow As Long, formulaStartRow As Long, formulaEndRow As Long
    Dim totalLabel As String
    Dim groupRange As Range

    ' Loop through each hierarchy level from the most detailed to the highest (e.g., Level 3, then 2, then 1)
    For level = UBound(hierarchyIndices) To 1 Step -1
        Application.StatusBar = "Processing Level " & (UBound(hierarchyIndices) - level + 1) & " of " & UBound(hierarchyIndices) & "..."
        
        lastDataRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
        groupStartRowInLevel = lastDataRow ' Initialize for the first group from the bottom

        ' Loop backwards through the data rows for the current level
        For r = lastDataRow To headerRowNum + 1 Step -1
            
            ' Skip any rows that are already subtotal rows from a previous, more detailed level
            If InStr(1, ws.Cells(r, subtotalIndices(1)).Formula, "SUBTOTAL") > 0 Then GoTo NextIteration
            
            ' Find the first "real" data row above the current row 'r' to compare against
            Dim prevDataRow As Long: prevDataRow = 0
            Dim temp_r As Long
            For temp_r = r - 1 To headerRowNum Step -1
                If InStr(1, ws.Cells(temp_r, subtotalIndices(1)).Formula, "SUBTOTAL") = 0 Then
                    prevDataRow = temp_r ' Found a data row or the header row
                    Exit For
                End If
            Next temp_r
            
            ' A group break occurs if the previous data row is the header, or if the hierarchy differs.
            If prevDataRow <= headerRowNum Or IsDifferentGroup(ws, r, prevDataRow, level, hierarchyIndices) Then
                
                ' --- 1. DEFINE RANGES ---
                formulaStartRow = r
                formulaEndRow = groupStartRowInLevel
                
                If summaryBelow Then
                    insertAtRow = formulaEndRow + 1
                Else ' Summary Above
                    insertAtRow = formulaStartRow
                End If
                
                ' --- 2. INSERT ROW, CLEAR FORMATTING, AND ADD LABELS ---
                ws.Rows(insertAtRow).Insert
                ws.Rows(insertAtRow).ClearFormats ' CRITICAL: Prevents copying unwanted formats
                
                ' Create the label (e.g., "Value A Total")
                totalLabel = ws.Cells(formulaStartRow, hierarchyIndices(level)).Value & TOTAL_LABEL_SUFFIX
                ws.Cells(insertAtRow, hierarchyIndices(level)).Value = totalLabel
                ws.Rows(insertAtRow).Font.Bold = True ' Apply desired format
                
                ' Copy parent values to the new total row for context
                For parentLevel = 1 To level - 1
                    ws.Cells(insertAtRow, hierarchyIndices(parentLevel)).Value = ws.Cells(formulaStartRow, hierarchyIndices(parentLevel)).Value
                Next parentLevel
                
                ' --- 3. WRITE SUBTOTAL FORMULAS ---
                For sc = 1 To UBound(subtotalIndices)
                    ws.Cells(insertAtRow, subtotalIndices(sc)).Formula = BuildSubtotalFormula(ws, subtotalIndices(sc), formulaStartRow, formulaEndRow)
                Next sc
                
                ' --- 4. CREATE OUTLINE GROUP ---
                If summaryBelow Then
                    Set groupRange = ws.Rows(formulaStartRow & ":" & formulaEndRow)
                Else ' Summary Above
                    Set groupRange = ws.Rows(insertAtRow + 1 & ":" & formulaEndRow + 1)
                End If
                groupRange.Group
                
                ' --- 5. RESET FOR NEXT GROUP ---
                groupStartRowInLevel = prevDataRow
            End If
NextIteration:
        Next r
    Next level
End Sub

Private Sub InsertGrandTotalRow(ws As Worksheet, ByVal headerRowNum As Long, hierarchyIndices() As Long, subtotalIndices() As Long)
    ' Inserts the Grand Total row at the top or bottom of the data.
    Application.StatusBar = "Adding Grand Total..."
    
    Dim lastDataRow As Long, insertAtRow As Long, sc As Long
    
    lastDataRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    
    If summaryBelow Then
        insertAtRow = lastDataRow + 1
    Else ' Summary Above
        insertAtRow = headerRowNum + 1
    End If
    
    ' Insert, clear formatting, and format the row
    ws.Rows(insertAtRow).Insert
    ws.Rows(insertAtRow).ClearFormats
    ws.Cells(insertAtRow, hierarchyIndices(1)).Value = GRAND_TOTAL_LABEL
    ws.Rows(insertAtRow).Font.Bold = True
    
    ' Add the formulas
    For sc = 1 To UBound(subtotalIndices)
        ws.Cells(insertAtRow, subtotalIndices(sc)).Formula = BuildSubtotalFormula(ws, subtotalIndices(sc), headerRowNum + 1, lastDataRow)
    Next sc
End Sub


'==============================================================================
' --- Utility and Helper Functions ---
'==============================================================================

Private Function IsDifferentGroup(ws As Worksheet, r1 As Long, r2 As Long, currentLevel As Long, hierarchyIndices() As Long) As Boolean
    ' Checks if two rows belong to a different group by comparing all hierarchy values
    ' from the highest level (1) down to the current level.
    Dim i As Long
    For i = 1 To currentLevel
        If CStr(ws.Cells(r1, hierarchyIndices(i)).Value) <> CStr(ws.Cells(r2, hierarchyIndices(i)).Value) Then
            IsDifferentGroup = True
            Exit Function ' A difference was found, no need to check further
        End If
    Next i
    ' If the loop completes, no differences were found up to the current level
    IsDifferentGroup = False
End Function

Private Function BuildSubtotalFormula(ws As Worksheet, ByVal colIdx As Long, ByVal startRow As Long, ByVal endRow As Long) As String
    ' Constructs a =SUBTOTAL(9, A1:A10) style formula string.
    Dim colLetter As String
    colLetter = Split(ws.Cells(1, colIdx).Address, "$")(1)
    
    Dim formulaRange As String
    If summaryBelow Then
        formulaRange = colLetter & startRow & ":" & colLetter & endRow
    Else
        ' When summary is above, the data rows are shifted down by 1 for each inserted row
        Dim rowsInsertedAboveStart As Long
        rowsInsertedAboveStart = ws.Range(ws.Rows(1), ws.Rows(startRow - 1)).SpecialCells(xlCellTypeFormulas, xlNumbers).Count / UBound(subtotalIndices)
        
        Dim rowsInsertedAboveEnd As Long
        rowsInsertedAboveEnd = ws.Range(ws.Rows(1), ws.Rows(endRow - 1)).SpecialCells(xlCellTypeFormulas, xlNumbers).Count / UBound(subtotalIndices)
        
        formulaRange = colLetter & startRow & ":" & colLetter & endRow
    End If
    
    BuildSubtotalFormula = "=SUBTOTAL(" & SUBTOTAL_FUNCTION_SUM & "," & formulaRange & ")"
End Function

Public Function GetColumnIndexByText(colName As String, ws As Worksheet, ByVal headerRowNum As Long) As Long
    ' Finds a column's index number by searching for its header text in the specified header row.
    ' Declared Public so it can be called from other modules, like the UserForm.
    Dim findRange As Range
    Set findRange = ws.Rows(headerRowNum).Find(What:=colName, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    
    If Not findRange Is Nothing Then
        GetColumnIndexByText = findRange.Column
    Else
        GetColumnIndexByText = 0 ' Return 0 if not found
    End If
End Function


'==============================================================================
' --- Application State Management ---
'==============================================================================

Private Sub SetupApplicationSettings()
    ' Disables certain Excel features to speed up the macro execution.
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Preparing to process..."
End Sub

Private Sub RestoreApplicationSettings(ByVal wasCancelled As Boolean)
    ' Restores Excel settings to their normal state.
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    If wasCancelled Then
        Application.StatusBar = "Operation cancelled by user."
    Else
        ' Application.StatusBar = False will clear the status bar
        Application.StatusBar = False
    End If
    
    ' Clear global collections to release memory
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
End Sub
