'====================================================================================
'====================================================================================
'==
'==  PROJECT:    Multi-Level Subtotal Tool
'==  VERSION:    4.1 (Refactored & Fixed)
'==  DATE:       July 16, 2025
'==  AUTHOR:     Gemini
'==
'==  DESCRIPTION:
'==  This VBA project provides a user-friendly tool for creating complex,
'==  multi-level subtotals in Excel. It uses a robust, fully manual engine
'==  that operates on a safe copy of the data, providing stability and
'==  correctness for subtotals placed either above or below data groups.
'==
'====================================================================================
'====================================================================================


'====================================================================================
'== CODE FOR THE USERFORM: frmMultiSubtotal
'== DESCRIPTION: Handles user interaction for selecting worksheets, hierarchy
'==              levels, and subtotal columns.
'====================================================================================
Option Explicit

' --- Form Control Event Handlers ---

Private Sub btnAddHierarchy_Click()
    ' Moves selected columns from 'Available' to 'Hierarchy'
    Call MoveSelectedItems(Me.lstAvailableCols, Me.lstHierarchyOrder, True)
End Sub

Private Sub btnRemoveHierarchy_Click()
    ' Moves selected columns from 'Hierarchy' back to 'Available'
    Call MoveSelectedItems(Me.lstHierarchyOrder, Me.lstAvailableCols, False)
End Sub

Private Sub btnAddSubtotal_Click()
    ' Moves selected columns from 'Available' to 'Subtotal'
    Call MoveSelectedItems(Me.lstAvailableCols, Me.lstSubtotalCols, True)
End Sub

Private Sub btnRemoveSubtotal_Click()
    ' Moves selected columns from 'Subtotal' back to 'Available'
    Call MoveSelectedItems(Me.lstSubtotalCols, Me.lstAvailableCols, False)
End Sub

Private Sub btnAddAllSubtotals_Click()
    ' Moves all remaining numeric columns to the subtotal list
    Call AddAllNumericColsToSubtotals
End Sub

Private Sub btnCancel_Click()
    ' Unloads the form and cancels the operation
    Call CancelAndCleanup
    Unload Me
End Sub

Private Sub btnUp_Click()
    ' Moves a selected item up in the hierarchy order list
    Call MoveListItemUpDown(Me.lstHierarchyOrder, -1)
End Sub

Private Sub btnDown_Click()
    ' Moves a selected item down in the hierarchy order list
    Call MoveListItemUpDown(Me.lstHierarchyOrder, 1)
End Sub

Private Sub btnOK_Click()
    ' --- 1. VALIDATE USER SELECTIONS ---
    If Me.cboWorksheets.ListIndex = -1 Then
        MsgBox "Please select a worksheet to process.", vbExclamation, "Validation Error"
        Exit Sub
    End If
    If Me.lstHierarchyOrder.ListCount = 0 Then
        MsgBox "Please select at least one column for the hierarchy.", vbExclamation, "Validation Error"
        Exit Sub
    End If
    If Me.lstSubtotalCols.ListCount = 0 Then
        MsgBox "Please select at least one column to subtotal.", vbExclamation, "Validation Error"
        Exit Sub
    End If
    
    ' --- 2. GATHER SETTINGS FROM FORM ---
    ' Pass all user-defined settings to the global variables in Module1
    targetWorksheetName = Me.cboWorksheets.Value
    summaryBelow = Me.optSummaryBelow.Value
    skipSort = Me.chkSkipSort.Value
    
    Set hierarchyColNames = New Collection
    Dim i As Long
    For i = 0 To Me.lstHierarchyOrder.ListCount - 1
        hierarchyColNames.Add Me.lstHierarchyOrder.List(i)
    Next i
    
    Set subtotalColNames = New Collection
    For i = 0 To Me.lstSubtotalCols.ListCount - 1
        subtotalColNames.Add Me.lstSubtotalCols.List(i)
    Next i
    
    ' --- 3. HIDE FORM AND RUN THE ENGINE ---
    Me.Hide
    Call RunInPlaceSubtotal ' Main call to the engine in Module1
    
    ' --- 4. CLEANUP ---
    Unload Me
End Sub

Private Sub cboWorksheets_Change()
    ' When a new worksheet is selected, refresh the column lists
    Call PopulateAvailableColumns
End Sub

Private Sub UserForm_Initialize()
    ' Set default states for all controls when the form is first opened
    Me.optSummaryBelow.Value = True
    Me.chkSkipSort.Value = False
    
    ' Clear all lists to ensure a fresh start
    Me.lstAvailableCols.Clear
    Me.lstHierarchyOrder.Clear
    Me.lstSubtotalCols.Clear
    
    ' Populate the worksheets dropdown
    Dim ws As Worksheet
    Me.cboWorksheets.Clear
    For Each ws In ThisWorkbook.Worksheets
        If ws.Visible = xlSheetVisible Then Me.cboWorksheets.AddItem ws.Name
    Next ws
    
    ' Try to select the currently active sheet by default
    On Error Resume Next
    Me.cboWorksheets.Value = ActiveSheet.Name
    If Err.Number <> 0 And Me.cboWorksheets.ListCount > 0 Then
        ' If active sheet isn't valid (e.g., a chart sheet), select the first one
        Me.cboWorksheets.ListIndex = 0
    End If
    On Error GoTo 0
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    ' Ensure cleanup runs if the user closes the form with the 'X' button
    If CloseMode = vbFormControlMenu Then
        Call CancelAndCleanup
    End If
End Sub


' --- Helper Subroutines for the Form ---

Private Sub PopulateAvailableColumns()
    ' Clears all list boxes and populates the "Available Columns" list
    ' based on the header row of the selected worksheet.
    
    Me.lstAvailableCols.Clear
    Me.lstHierarchyOrder.Clear
    Me.lstSubtotalCols.Clear
    
    If Me.cboWorksheets.ListIndex = -1 Then Exit Sub
    
    On Error GoTo PopulateError
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets(Me.cboWorksheets.Value)
    
    Dim lastCol As Long, i As Long, headerText As String
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    
    ' Check if any headers were found
    If lastCol = 1 And ws.Cells(headerRow, 1).Value = "" Then Exit Sub
    
    For i = 1 To lastCol
        headerText = Trim(ws.Cells(headerRow, i).Text)
        If headerText <> "" Then
            Me.lstAvailableCols.AddItem headerText
        End If
    Next i
    
    Exit Sub
PopulateError:
    ' Silently fail if sheet is protected or other error occurs
End Sub

Private Sub MoveSelectedItems(sourceList As MSForms.ListBox, destList As MSForms.ListBox, removeItemFromSource As Boolean)
    ' Generic helper to move items from a source listbox to a destination listbox.
    Dim i As Long
    
    ' Loop backwards since we are removing items
    For i = sourceList.ListCount - 1 To 0 Step -1
        If sourceList.Selected(i) Then
            destList.AddItem sourceList.List(i)
            If removeItemFromSource Then
                sourceList.RemoveItem i
            End If
        End If
    Next i
End Sub

Private Sub MoveListItemUpDown(listBox As MSForms.ListBox, direction As Integer)
    ' Moves a selected item up or down within a listbox.
    ' direction: -1 for Up, 1 for Down.
    Dim selectedIdx As Long: selectedIdx = listBox.ListIndex
    
    ' Exit if nothing is selected or at the boundary
    If selectedIdx = -1 Then Exit Sub
    If direction = -1 And selectedIdx = 0 Then Exit Sub ' Already at the top
    If direction = 1 And selectedIdx = listBox.ListCount - 1 Then Exit Sub ' Already at the bottom
    
    ' Swap the items
    Dim tempText As String: tempText = listBox.List(selectedIdx)
    listBox.List(selectedIdx) = listBox.List(selectedIdx + direction)
    listBox.List(selectedIdx + direction) = tempText
    
    ' Keep the moved item selected
    listBox.Selected(selectedIdx + direction) = True
End Sub

Private Sub AddAllNumericColsToSubtotals()
    ' Identifies all columns in the source sheet that appear to be numeric
    ' and moves them to the Subtotal Columns list.
    If Me.cboWorksheets.ListIndex = -1 Then Exit Sub
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets(Me.cboWorksheets.Value)
    
    Dim i As Long, colIdx As Long
    For i = Me.lstAvailableCols.ListCount - 1 To 0 Step -1
        colIdx = GetColumnIndexByText(Me.lstAvailableCols.List(i), ws, headerRow)
        If colIdx > 0 Then
            ' Check if the first data cell in the column is numeric
            If IsNumeric(ws.Cells(headerRow + 1, colIdx).Value) Then
                Me.lstSubtotalCols.AddItem Me.lstAvailableCols.List(i)
                Me.lstAvailableCols.RemoveItem i
            End If
        End If
    Next i
End Sub


'====================================================================================
'== CODE FOR A NEW MODULE (e.g., Module1)
'== DESCRIPTION: This is the "In-Place" engine that works on a copy of the sheet.
'==              It contains the core logic for the subtotal creation process.
'====================================================================================
Option Explicit

' --- Constants ---
Private Const SUBTOTAL_FUNCTION_SUM As Long = 9 ' The function number for SUM in SUBTOTAL()
Private Const GRAND_TOTAL_LABEL As String = "Grand Total"
Private Const TOTAL_LABEL_SUFFIX As String = " Total"
Private Const HEADER_ROW_PROMPT As String = "Please enter the header row number for your data:"
Private Const HEADER_ROW_TITLE As String = "Specify Header Row"
Private Const DEFAULT_HEADER_ROW As String = "1"

' --- Global variables to hold settings from the UserForm ---
Public targetWorksheetName As String
Public hierarchyColNames As Collection
Public subtotalColNames As Collection
Public summaryBelow As Boolean
Public headerRow As Long
Public skipSort As Boolean


'==============================================================================
' --- Public Entry Points ---
'==============================================================================

Sub ShowSubtotalForm()
    ' The main entry point called by the user (e.g., from a button).
    ' It prompts for the header row, then shows the main form.
    
    ' Reset global collections
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
    
    Dim headerRowInput As String
    Do
        headerRowInput = InputBox(HEADER_ROW_PROMPT, HEADER_ROW_TITLE, DEFAULT_HEADER_ROW)
        
        If headerRowInput = "" Then Exit Sub ' User pressed Cancel
        
        If IsNumeric(headerRowInput) And CLng(headerRowInput) > 0 Then
            headerRow = CLng(headerRowInput)
            frmMultiSubtotal.Show
            Exit Sub ' Exit after form is closed and code has run
        Else
            MsgBox "Invalid input. Please enter a positive number for the row.", vbExclamation
        End If
    Loop
End Sub

Sub CancelAndCleanup()
    ' Public routine to be called if the operation is cancelled from the form.
    Call RestoreApplicationSettings(True)
End Sub


'==============================================================================
' --- Main Controller ---
'==============================================================================

Sub RunInPlaceSubtotal()
    ' This is the main controller procedure. It orchestrates the entire
    ' subtotaling process from start to finish.
    
    On Error GoTo ErrorHandler
    
    Call SetupApplicationSettings
    
    Dim wsSource As Worksheet, wsOutput As Worksheet
    Dim hierarchyIndices() As Long, subtotalIndices() As Long
    Dim dataRange As Range
    
    Set wsSource = ThisWorkbook.Worksheets(targetWorksheetName)
    
    ' --- Step 1: Create a safe working copy of the sheet ---
    Set wsOutput = CreateWorkingCopy(wsSource)
    
    ' --- Step 2: Prepare the new sheet and get column indices ---
    If Not PrepareSheetAndGetIndices(wsOutput, hierarchyIndices, subtotalIndices, dataRange) Then
        GoTo Cleanup ' Exit if preparation fails (e.g., columns not found)
    End If
    
    ' --- Step 3: Sort the data if requested by the user ---
    If Not skipSort Then
        Call ApplySorting(wsOutput, dataRange, hierarchyIndices)
    End If
    
    ' --- Step 4: Create the multi-level subtotals (the core engine) ---
    Call CreateLevelSubtotals(wsOutput, headerRow, hierarchyIndices, subtotalIndices)
    
    ' --- Step 5: Add the final Grand Total row ---
    Call InsertGrandTotalRow(wsOutput, headerRow, hierarchyIndices, subtotalIndices)
    
    ' --- Step 6: Finalize the sheet appearance ---
    wsOutput.Columns.AutoFit
    wsOutput.Activate
    wsOutput.Cells(1, 1).Select
    
    Application.StatusBar = "Process complete!"

Cleanup:
    ' Restore Excel settings regardless of success or failure
    Call RestoreApplicationSettings(False)
    Exit Sub
    
ErrorHandler:
    ' Display a detailed error message and perform cleanup
    MsgBox "An unexpected error occurred:" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description:  " & Err.Description, vbCritical, "Subtotal Tool Error"
    Resume Cleanup
End Sub


'==============================================================================
' --- Core Engine Procedures ---
'==============================================================================

Private Function CreateWorkingCopy(wsSource As Worksheet) As Worksheet
    ' Creates a copy of the source worksheet to ensure the original data is untouched.
    ' Names the new sheet uniquely.
    Application.StatusBar = "Creating a copy of the worksheet..."
    
    wsSource.Copy After:=wsSource
    Dim wsCopy As Worksheet
    Set wsCopy = ActiveSheet
    
    ' Find a unique name for the new sheet
    Dim copyName As String, i As Integer: i = 1
    On Error Resume Next
    Do
        copyName = wsSource.Name & " (Subtotals " & i & ")"
        ' Check if a sheet with this name already exists
        If ThisWorkbook.Worksheets(copyName) Is Nothing Then
            wsCopy.Name = copyName
            Exit Do
        End If
        i = i + 1
    Loop
    On Error GoTo 0 ' Resume normal error handling
    
    Set CreateWorkingCopy = wsCopy
End Function

Private Function PrepareSheetAndGetIndices(ws As Worksheet, ByRef hierarchyIndices() As Long, ByRef subtotalIndices() As Long, ByRef dataRange As Range) As Boolean
    ' Prepares the worksheet by clearing old outlines/subtotals and finds the
    ' column index numbers for all specified hierarchy and subtotal columns.
    Application.StatusBar = "Preparing sheet and validating columns..."
    
    ws.Cells.ClearOutline
    ws.Cells.RemoveSubtotal
    
    Dim i As Long, colIdx As Long, lastCol As Long, lastRow As Long
    
    ' Get hierarchy column indices
    ReDim hierarchyIndices(1 To hierarchyColNames.Count)
    For i = 1 To hierarchyColNames.Count
        colIdx = GetColumnIndexByText(hierarchyColNames(i), ws, headerRow)
        If colIdx = 0 Then
            MsgBox "Could not find HIERARCHY column '" & hierarchyColNames(i) & "'.", vbCritical
            Exit Function
        End If
        hierarchyIndices(i) = colIdx
    Next i
    
    ' Get subtotal column indices
    ReDim subtotalIndices(1 To subtotalColNames.Count)
    For i = 1 To subtotalColNames.Count
        colIdx = GetColumnIndexByText(subtotalColNames(i), ws, headerRow)
        If colIdx = 0 Then
            MsgBox "Could not find SUBTOTAL column '" & subtotalColNames(i) & "'.", vbCritical
            Exit Function
        End If
        subtotalIndices(i) = colIdx
    Next i
    
    ' Define the main data range
    lastCol = ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
    lastRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    
    If lastRow <= headerRow Then
        MsgBox "No data found below the specified header row.", vbInformation
        Exit Function
    End If
    
    Set dataRange = ws.Range(ws.Cells(headerRow + 1, 1), ws.Cells(lastRow, lastCol))
    PrepareSheetAndGetIndices = True
End Function

Private Sub ApplySorting(ws As Worksheet, dataRangeWithHeaders As Range, hierarchyIndices() As Long)
    ' Sorts the data range by all hierarchy columns in their specified order.
    Application.StatusBar = "Sorting data..."
    
    Dim i As Long
    With ws.Sort
        .SortFields.Clear
        For i = 1 To UBound(hierarchyIndices)
            .SortFields.Add Key:=ws.Columns(hierarchyIndices(i)), SortOn:=xlSortOnValues, Order:=xlAscending
        Next i
        .SetRange ws.Range(ws.Cells(headerRow, 1), dataRangeWithHeaders.Cells(dataRangeWithHeaders.Rows.Count, dataRangeWithHeaders.Columns.Count))
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .Apply
    End With
End Sub

Private Sub CreateLevelSubtotals(ws As Worksheet, ByVal headerRowNum As Long, hierarchyIndices() As Long, subtotalIndices() As Long)
    ' This is the definitive manual engine. It processes level-by-level from the
    ' most detailed to the highest, inserting subtotal rows and creating outline groups.
    
    Dim lastDataRow As Long, r As Long, level As Long, parentLevel As Long, sc As Long
    Dim groupStartRowInLevel As Long
    Dim insertAtRow As Long, formulaStartRow As Long, formulaEndRow As Long
    Dim totalLabel As String
    Dim groupRange As Range

    ' Loop through each hierarchy level from the most detailed to the highest (e.g., Level 3, then 2, then 1)
    For level = UBound(hierarchyIndices) To 1 Step -1
        Application.StatusBar = "Processing Level " & (UBound(hierarchyIndices) - level + 1) & " of " & UBound(hierarchyIndices) & "..."
        
        lastDataRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
        groupStartRowInLevel = lastDataRow ' Initialize for the first group from the bottom

        ' Loop backwards through the rows for the current level
        For r = lastDataRow To headerRowNum + 1 Step -1
            
            ' A group break occurs if the value in the current level's column changes,
            ' or if we've hit the first row of data.
            Dim isGroupBreak As Boolean
            isGroupBreak = (CStr(ws.Cells(r, hierarchyIndices(level)).Value) <> CStr(ws.Cells(r - 1, hierarchyIndices(level)).Value))
            
            If isGroupBreak Or r = headerRowNum + 1 Then
                
                ' --- 1. DEFINE RANGES ---
                formulaStartRow = r
                formulaEndRow = groupStartRowInLevel
                
                If summaryBelow Then
                    insertAtRow = formulaEndRow + 1
                Else ' Summary Above
                    insertAtRow = formulaStartRow
                End If
                
                ' --- 2. INSERT ROW AND ADD LABELS ---
                ws.Rows(insertAtRow).Insert
                
                ' Create the label (e.g., "Value A Total")
                totalLabel = ws.Cells(formulaStartRow, hierarchyIndices(level)).Value & TOTAL_LABEL_SUFFIX
                ws.Cells(insertAtRow, hierarchyIndices(level)).Value = totalLabel
                ws.Cells(insertAtRow, hierarchyIndices(level)).Font.Bold = True
                
                ' Copy parent values to the new total row for context
                For parentLevel = 1 To level - 1
                    ws.Cells(insertAtRow, hierarchyIndices(parentLevel)).Value = ws.Cells(formulaStartRow, hierarchyIndices(parentLevel)).Value
                Next parentLevel
                
                ' --- 3. WRITE SUBTOTAL FORMULAS ---
                For sc = 1 To UBound(subtotalIndices)
                    ws.Cells(insertAtRow, subtotalIndices(sc)).Formula = BuildSubtotalFormula(ws, subtotalIndices(sc), formulaStartRow, formulaEndRow)
                Next sc
                
                ' --- 4. CREATE OUTLINE GROUP ---
                If summaryBelow Then
                    Set groupRange = ws.Rows(formulaStartRow & ":" & formulaEndRow)
                Else ' Summary Above
                    ' The group range is the data rows below the new total row
                    Set groupRange = ws.Rows(insertAtRow + 1 & ":" & formulaEndRow + 1)
                End If
                groupRange.Group
                
                ' --- 5. RESET FOR NEXT GROUP ---
                ' The start of the next group (moving up) is the row just above the current one
                groupStartRowInLevel = r - 1
            End If
        Next r
    Next level
End Sub

Private Sub InsertGrandTotalRow(ws As Worksheet, ByVal headerRowNum As Long, hierarchyIndices() As Long, subtotalIndices() As Long)
    ' Inserts the Grand Total row at the top or bottom of the data.
    Application.StatusBar = "Adding Grand Total..."
    
    Dim lastDataRow As Long, insertAtRow As Long, sc As Long
    
    lastDataRow = ws.Cells(ws.Rows.Count, hierarchyIndices(1)).End(xlUp).Row
    
    If summaryBelow Then
        insertAtRow = lastDataRow + 1
    Else ' Summary Above
        insertAtRow = headerRowNum + 1
    End If
    
    ' Insert and format the row
    ws.Rows(insertAtRow).Insert
    ws.Cells(insertAtRow, hierarchyIndices(1)).Value = GRAND_TOTAL_LABEL
    ws.Rows(insertAtRow).Font.Bold = True
    
    ' Add the formulas
    For sc = 1 To UBound(subtotalIndices)
        ws.Cells(insertAtRow, subtotalIndices(sc)).Formula = BuildSubtotalFormula(ws, subtotalIndices(sc), headerRowNum + 1, lastDataRow)
    Next sc
End Sub


'==============================================================================
' --- Utility and Helper Functions ---
'==============================================================================

Private Function BuildSubtotalFormula(ws As Worksheet, ByVal colIdx As Long, ByVal startRow As Long, ByVal endRow As Long) As String
    ' Constructs a =SUBTOTAL(9, A1:A10) style formula string.
    ' This centralized function makes it easy to change the subtotal function (e.g., to AVERAGE) in one place.
    Dim colLetter As String
    colLetter = Split(ws.Cells(1, colIdx).Address, "$")(1)
    
    Dim formulaRange As String
    If summaryBelow Then
        formulaRange = colLetter & startRow & ":" & colLetter & endRow
    Else
        ' When summary is above, the data rows are shifted down by 1
        formulaRange = colLetter & startRow + 1 & ":" & colLetter & endRow + 1
    End If
    
    BuildSubtotalFormula = "=SUBTOTAL(" & SUBTOTAL_FUNCTION_SUM & "," & formulaRange & ")"
End Function

Public Function GetColumnIndexByText(colName As String, ws As Worksheet, ByVal headerRowNum As Long) As Long
    ' Finds a column's index number by searching for its header text in the specified header row.
    ' Declared Public so it can be called from other modules, like the UserForm.
    Dim findRange As Range
    Set findRange = ws.Rows(headerRowNum).Find(What:=colName, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    
    If Not findRange Is Nothing Then
        GetColumnIndexByText = findRange.Column
    Else
        GetColumnIndexByText = 0 ' Return 0 if not found
    End If
End Function


'==============================================================================
' --- Application State Management ---
'==============================================================================

Private Sub SetupApplicationSettings()
    ' Disables certain Excel features to speed up the macro execution.
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Preparing to process..."
End Sub

Private Sub RestoreApplicationSettings(ByVal wasCancelled As Boolean)
    ' Restores Excel settings to their normal state.
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    If wasCancelled Then
        Application.StatusBar = "Operation cancelled by user."
    Else
        ' Application.StatusBar = False will clear the status bar
        Application.StatusBar = False
    End If
    
    ' Clear global collections to release memory
    Set hierarchyColNames = Nothing
    Set subtotalColNames = Nothing
End Sub
